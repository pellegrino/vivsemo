
/////
// File automatically generated by protoc-gen-twirp_dart
// DO NOT EDIT
/////
import 'dart:async';
import 'package:http/http.dart';
import 'package:requester/requester.dart';
import 'package:twirp_dart_core/twirp_dart_core.dart';
import 'dart:convert';
import '../../google/protobuf/empty.twirp.dart';
import './service.pb.dart' as pb;
class AllPhotosResponse {

	AllPhotosResponse(
	this.photos,);

    List<Photo> photos;
		

	pb.AllPhotosResponse toProto() {
		var pbAllPhotosResponse = pb.AllPhotosResponse();
		photos?.forEach((l) => pbAllPhotosResponse.photos.add(l.toProto()));

		return pbAllPhotosResponse;
	}

	factory AllPhotosResponse.fromProto(pb.AllPhotosResponse pbAllPhotosResponse) {
		var photos = new List<Photo>();
		pbAllPhotosResponse.photos?.forEach((l) => photos.add(Photo.fromProto(l)));

			return new AllPhotosResponse(
					photos,
				
			);
	}
	
	factory AllPhotosResponse.fromProtobufBytes(List<int> byteValues) {
		var pbAllPhotosResponse = pb.AllPhotosResponse.fromBuffer(byteValues);
		return AllPhotosResponse.fromProto(pbAllPhotosResponse);
	}
	
	factory AllPhotosResponse.fromJson(Map<String,dynamic> json) {
		

		return new AllPhotosResponse(
		json['photos'] != null
          ? (json['photos'] as List)
              .map((d) => new Photo.fromJson(d))
              .toList()
          : <Photo>[],
		
		);	
	}

	Map<String,dynamic>toJson() {
		var map = new Map<String, dynamic>();
		map['photos'] = photos?.map((l) => l.toJson())?.toList();
		return map;
	}

  @override
  String toString() {
    return json.encode(toJson());
  }
}

class Photo {

	Photo(
	this.title,this.description,this.url,);

    String title;
		String description;
		String url;
		

	pb.Photo toProto() {
		var pbPhoto = pb.Photo();
    	pbPhoto.title = title;
    	pbPhoto.description = description;
    	pbPhoto.url = url;

		return pbPhoto;
	}

	factory Photo.fromProto(pb.Photo pbPhoto) {

			return new Photo(
					pbPhoto.title,
				
					pbPhoto.description,
				
					pbPhoto.url,
				
			);
	}
	
	factory Photo.fromProtobufBytes(List<int> byteValues) {
		var pbPhoto = pb.Photo.fromBuffer(byteValues);
		return Photo.fromProto(pbPhoto);
	}
	
	factory Photo.fromJson(Map<String,dynamic> json) {
		
		
		

		return new Photo(
		json['title'] as String,
		json['description'] as String,
		json['url'] as String,
		);	
	}

	Map<String,dynamic>toJson() {
		var map = new Map<String, dynamic>();
    	map['title'] = title;
    	map['description'] = description;
    	map['url'] = url;
		return map;
	}

  @override
  String toString() {
    return json.encode(toJson());
  }
}

abstract class Api {
	Future<AllPhotosResponse>getAllPhotos(Empty empty);
}

class ProtobufApi implements Api {
	final String hostname;
    Requester _requester;
	final _pathPrefix = "/twirp/com.vivsemo.api.Api/";

    ProtobufApi(this.hostname, {Requester requester}) {
		if (requester == null) {
      		_requester = new Requester(new Client());
    	} else {
			_requester = requester;
		}
	}

    
	Future<AllPhotosResponse>getAllPhotos(Empty empty) async {
		var url = "${hostname}${_pathPrefix}GetAllPhotos";
		var uri = Uri.parse(url);
    	var request = new Request('POST', uri);
		request.headers['Content-Type'] = 'application/protobuf';
			request.bodyBytes = empty.toProto().writeToBuffer();
    	var response = await _requester.send(request);
		if (response.statusCode != 200) {
     		throw twirpException(response);
			}
			return AllPhotosResponse.fromProtobufBytes(response.bodyBytes);
	}
    

	Exception twirpException(Response response) {
    	try {
      		var value = json.decode(response.body);
      		return new TwirpJsonException.fromJson(value);
    	} catch (e) {
      		return new TwirpException(response.body);
    	}
  	}
}

class DefaultApi implements Api {
	final String hostname;
    Requester _requester;
	final _pathPrefix = "/twirp/com.vivsemo.api.Api/";

    DefaultApi(this.hostname, {Requester requester}) {
		if (requester == null) {
      		_requester = new Requester(new Client());
    	} else {
			_requester = requester;
		}
	}

    
	Future<AllPhotosResponse>getAllPhotos(Empty empty) async {
		var url = "${hostname}${_pathPrefix}GetAllPhotos";
		var uri = Uri.parse(url);
    	var request = new Request('POST', uri);
		request.headers['Content-Type'] = 'application/json';
    	request.body = json.encode(empty.toJson());
    	var response = await _requester.send(request);
		if (response.statusCode != 200) {
     		throw twirpException(response);
    	}
    	var value = json.decode(response.body);
    	return AllPhotosResponse.fromJson(value);
	}
    

	Exception twirpException(Response response) {
    	try {
      		var value = json.decode(response.body);
      		return new TwirpJsonException.fromJson(value);
    	} catch (e) {
      		return new TwirpException(response.body);
    	}
  	}
}


